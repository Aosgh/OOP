{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Lab_Assignment2.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FcblBfBv0Ccx",
        "outputId": "59f0fb27-c234-45b9-e565-46ef91055228"
      },
      "source": [
        "#PROBLEM 1\n",
        "\n",
        "\n",
        "class Circle():\n",
        "    def __init__(self, r):\n",
        "        self.radius = r\n",
        "\n",
        "    def area(self):\n",
        "        return self.radius**2*3.1416\n",
        "    \n",
        "    def perimeter(self):\n",
        "        return 2*3.1416*self.radius\n",
        "\n",
        "NewCircle = Circle(5)\n",
        "print(\"The area of the desired circle is : \", NewCircle.area())\n",
        "print(\"The perimeter of desired circle is : \", NewCircle.perimeter())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The area of the desired circle is :  78.53999999999999\n",
            "The perimeter of desired circle is :  31.416\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2KgBW3Sb0-2r",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "54b70561-95e1-4e62-f812-806ae7b0bb47"
      },
      "source": [
        "#problem 2\n",
        "\n",
        "class faculty:\n",
        "      def Data1(self):\n",
        "       self.name = str(input(\"Please enter the name of the faculty: \"))\n",
        "       self.emp_id = float(input(\"Please enter the emp ID of the faculty: \"))\n",
        "       self.branch = input(\"Please enter the branch of the faculty: \")\n",
        "       self.salary = float(input(\"Please enter the salary of the faculty: \"))\n",
        "\n",
        "      def Data2(self):\n",
        "        print(f\"Name : {self.name} \\nEmployee ID : {self.emp_id} \\nBranch : {self.branch} \\nSalary : {self.salary}\\n\")\n",
        "        return self.name, self.emp_id, self.branch, self.salary\n",
        "      \n",
        "Teacherlist = []\n",
        "for i in range(1, 5):\n",
        "    temp = faculty()\n",
        "    print(f\"\\nEnter the data for {i}th faculty : \")\n",
        "    temp.Data1()\n",
        "    Teacherlist.append(temp)\n",
        "    print('\\n')      \n",
        "for i in range(0, 4):\n",
        "    print(f\"\\nDetails of {i+1}th faculty : \")\n",
        "    Teacherlist[i].Data2()\n",
        "\n",
        "\n",
        "    \n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Enter the data for 1th faculty : \n",
            "Please enter the name of the faculty: Anmol\n",
            "Please enter the emp ID of the faculty: 420\n",
            "Please enter the branch of the faculty: mathematics\n",
            "Please enter the salary of the faculty: 2500\n",
            "\n",
            "\n",
            "\n",
            "Enter the data for 2th faculty : \n",
            "Please enter the name of the faculty: Paras\n",
            "Please enter the emp ID of the faculty: 9211\n",
            "Please enter the branch of the faculty: organic chemistry\n",
            "Please enter the salary of the faculty: 5600\n",
            "\n",
            "\n",
            "\n",
            "Enter the data for 3th faculty : \n",
            "Please enter the name of the faculty: Subrat\n",
            "Please enter the emp ID of the faculty: 666\n",
            "Please enter the branch of the faculty: mathematics\n",
            "Please enter the salary of the faculty: 45000\n",
            "\n",
            "\n",
            "\n",
            "Enter the data for 4th faculty : \n",
            "Please enter the name of the faculty: vimal\n",
            "Please enter the emp ID of the faculty: 969\n",
            "Please enter the branch of the faculty: physical chemistry\n",
            "Please enter the salary of the faculty: 4600\n",
            "\n",
            "\n",
            "\n",
            "Details of 1th faculty : \n",
            "Name : Anmol \n",
            "Employee ID : 420.0 \n",
            "Branch : mathematics \n",
            "Salary : 2500.0\n",
            "\n",
            "\n",
            "Details of 2th faculty : \n",
            "Name : Paras \n",
            "Employee ID : 9211.0 \n",
            "Branch : organic chemistry \n",
            "Salary : 5600.0\n",
            "\n",
            "\n",
            "Details of 3th faculty : \n",
            "Name : Subrat \n",
            "Employee ID : 666.0 \n",
            "Branch : mathematics \n",
            "Salary : 45000.0\n",
            "\n",
            "\n",
            "Details of 4th faculty : \n",
            "Name : vimal \n",
            "Employee ID : 969.0 \n",
            "Branch : physical chemistry \n",
            "Salary : 4600.0\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E9_WNWSI7GZh"
      },
      "source": [
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6RJu9GgTH2p9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "abec13f3-4df2-4dbe-b2cf-af780692c217"
      },
      "source": [
        "#problem 3\n",
        "\n",
        "class bank_account:\n",
        "  def __init__(self, name, account_number, amount):\n",
        "    self.name = name\n",
        "    self.account_number = account_number\n",
        "    self.amount = amount\n",
        "\n",
        "  def deposit(self, dep_amount):\n",
        "    self.amount += dep_amount\n",
        "    print(\"%d rupees deposited succesfully.\" % dep_amount)\n",
        "  \n",
        "  def withdraw(self, with_amount):\n",
        "    if self.amount - with_amount >= 0:\n",
        "      self.amount -= with_amount\n",
        "      print(\"%d rupees withdrawn succesfully.\" % with_amount)\n",
        "    else:\n",
        "      print(\"Sufficient amount not present in the account.\")\n",
        "\n",
        "  def check_balance(self):\n",
        "    print(\"The balance in the account is %d rupees.\" % self.amount)\n",
        "\n",
        "  def disp_details(self):\n",
        "    print('Name: {}\\nAccount No: {}\\nAmount: {}'.format(self.name.title(), self.account_number, self.amount))\n",
        "\n",
        "def take_info():\n",
        "  print('Please enter name,account no, amount respectively and seperate using commas')\n",
        "  info = input('Enter the details of account holder: ')\n",
        "  info_list = info.split(',')\n",
        "\n",
        "  return bank_account(info_list[0], info_list[1], int(info_list[2]))\n",
        "\n",
        "account_holder = take_info()\n",
        "print()\n",
        "account_holder.deposit(10000)\n",
        "account_holder.withdraw(12000)\n",
        "account_holder.check_balance()\n",
        "print()\n",
        "account_holder.disp_details()\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Please enter name,account no, amount respectively and seperate using commas\n",
            "Enter the details of account holder: harshit, cbi, 25000\n",
            "\n",
            "10000 rupees deposited succesfully.\n",
            "12000 rupees withdrawn succesfully.\n",
            "The balance in the account is 23000 rupees.\n",
            "\n",
            "Name: Harshit\n",
            "Account No:  cbi\n",
            "Amount: 23000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bKPmxMP7CmQ4",
        "outputId": "cd8dda38-e83f-45d3-bf64-244c9eebe967"
      },
      "source": [
        "#problem 4\n",
        "\n",
        "\n",
        "class students:\n",
        "    def Data1(self):\n",
        "      self.name =input(\"Please enter the name of the student: \")\n",
        "      self.USN = int(input(\"Please enter the USN of the student : \"))\n",
        "      self.marks = []\n",
        "      for i in range(1, 4) :\n",
        "        marks = input(f\"please enter the marks for subject {i} : \")\n",
        "        self.marks.append(marks)\n",
        "\n",
        "    def show(self):\n",
        "      print(f\"Name : {self.name} \\nUSN : {self.USN} \\nMarks : \\nSubject 1 : {self.marks[0]} \\nSubject 2 : {self.marks[1]} \\nSubject 3 : {self.marks[2]}\")\n",
        "      return self.name, self.USN, self.marks    \n",
        "\n",
        "get = students()\n",
        "get.Data1()\n",
        "list1 = get.show()\n",
        "print(list1)      \n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Please enter the name of the student: Jaanki\n",
            "Please enter the USN of the student : 56\n",
            "please enter the marks for subject 1 : 96\n",
            "please enter the marks for subject 2 : 95\n",
            "please enter the marks for subject 3 : 5\n",
            "Name : Jaanki \n",
            "USN : 56 \n",
            "Marks : \n",
            "Subject 1 : 96 \n",
            "Subject 2 : 95 \n",
            "Subject 3 : 5\n",
            "('Jaanki', 56, ['96', '95', '5'])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LBanrq58Cnqu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ce1b942b-0f93-4dee-a571-025907dc6a8e"
      },
      "source": [
        "#problem 5\n",
        "\n",
        "\n",
        "class Patient:\n",
        "    def setData(self):\n",
        "        self.name = input(\"Enter the name of the patient : \")\n",
        "        self.dateOfAdmission = input(\"Enter the date of admission : \")\n",
        "        self.symptoms = input(\"Enter all the symptoms with a space in between : \").split(\" \")\n",
        "        self.oxygenLevel = int(input(\"Enter the oxygen level of the patient : \"))\n",
        "        self.dateOfDischarge = input(\"Enter the date of discharge : \")\n",
        "\n",
        "    def getData(self):\n",
        "        print(f\"\\nName : {self.name} \\nDate of Admission : {self.dateOfAdmission} \\nSymptoms : {self.symptoms} \\nOxygen Level : {self.oxygenLevel} \\nDate of Discharge : {self.dateOfDischarge}\\n\")\n",
        "        return self.name, self.dateOfAdmission, self.symptoms, self.oxygenLevel, self.dateOfDischarge\n",
        "\n",
        "    def checkSeverity(self):\n",
        "        if self.oxygenLevel < 90:\n",
        "            print(\"Patient's condition is severe.\")\n",
        "        else:\n",
        "            print(\"Patient is doing fine.\")\n",
        "\n",
        "\n",
        "class Hospital:    \n",
        "    def __init__(self):\n",
        "        self.listOfPatients = []\n",
        "        self.oxygenSupport = []\n",
        "\n",
        "    def addPatient(self):\n",
        "        temp = Patient()\n",
        "        temp.setData()\n",
        "        if temp.oxygenLevel < 90:\n",
        "            self.oxygenSupport.append(1)\n",
        "        else:\n",
        "            self.oxygenSupport.append(0)\n",
        "        self.listOfPatients.append(temp)\n",
        "\n",
        "    def checkSeverity(self):\n",
        "        name = input(\"Enter the name of the patient : \")\n",
        "        for i in range(0, len(self.listOfPatients)):\n",
        "            if name == self.listOfPatients[i].name:\n",
        "                self.listOfPatients[i].checkSeverity()\n",
        "                return 1\n",
        "        print(\"Patient not found\")\n",
        "\n",
        "\n",
        "    def getOxygenSupport(self):\n",
        "        return self.oxygenSupport.count(1)\n",
        "\n",
        "    def generalWard(self):\n",
        "        return self.oxygenSupport.count(0)\n",
        "\n",
        "    def totalPatients(self):\n",
        "        return len(self.listOfPatients)\n",
        "\n",
        "\n",
        "H1 = Hospital()\n",
        "\n",
        "for i in range(0, 2):\n",
        "    H1.addPatient()\n",
        "    H1.listOfPatients[i].getData()\n",
        "    H1.listOfPatients[i].checkSeverity()\n",
        "\n",
        "print(H1.getOxygenSupport())\n",
        "print(H1.generalWard())\n",
        "print(H1.totalPatients())\n",
        "H1.checkSeverity()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the name of the patient : Mahesh\n",
            "Enter the date of admission : 15/09/21\n",
            "Enter all the symptoms with a space in between : cough dizziness weakness\n",
            "Enter the oxygen level of the patient : 98\n",
            "Enter the date of discharge : 18/09/21\n",
            "\n",
            "Name : Mahesh \n",
            "Date of Admission : 15/09/21 \n",
            "Symptoms : ['cough', 'dizziness', 'weakness'] \n",
            "Oxygen Level : 98 \n",
            "Date of Discharge : 18/09/21\n",
            "\n",
            "Patient is doing fine.\n",
            "Enter the name of the patient : Murli\n",
            "Enter the date of admission : 10/08/21\n",
            "Enter all the symptoms with a space in between : cough fever headache \n",
            "Enter the oxygen level of the patient : 86\n",
            "Enter the date of discharge : 16/08/21\n",
            "\n",
            "Name : Murli \n",
            "Date of Admission : 10/08/21 \n",
            "Symptoms : ['cough', 'fever', 'headache', ''] \n",
            "Oxygen Level : 86 \n",
            "Date of Discharge : 16/08/21\n",
            "\n",
            "Patient's condition is severe.\n",
            "1\n",
            "1\n",
            "2\n",
            "Enter the name of the patient : Murli\n",
            "Patient's condition is severe.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "suY2QmDaCpKO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "42292f0c-8c72-4943-9030-f188043fc22e"
      },
      "source": [
        "#problem 6\n",
        "\n",
        "\n",
        "\n",
        "class Time:\n",
        "    def setToDefault(self):\n",
        "        self.hours = 0\n",
        "        self.minutes = 0\n",
        "        self.seconds = 0\n",
        "\n",
        "    def setToVal(self, hours, minutes, seconds):\n",
        "        if seconds > 59:\n",
        "            tempMinutes = seconds // 60\n",
        "            seconds = seconds % 60\n",
        "            self.seconds = seconds\n",
        "            self.minutes = tempMinutes + minutes\n",
        "        else:\n",
        "            self.seconds = seconds\n",
        "            self.minutes = minutes\n",
        "\n",
        "        if self.minutes > 59:\n",
        "            tempHours = self.minutes // 60\n",
        "            self.minutes = self.minutes % 60\n",
        "            self.hours = tempHours + hours\n",
        "        else:\n",
        "            self.minutes = minutes\n",
        "            self.hours = hours\n",
        "\n",
        "    def displayTime(self):\n",
        "        print(f\"Time : {self.hours}::{self.minutes}::{self.seconds}\")\n",
        "\n",
        "\n",
        "T1 = Time()\n",
        "T1.setToDefault()\n",
        "T1.displayTime()\n",
        "T1.setToVal(20, 59, 59)\n",
        "T1.displayTime()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Time : 0::0::0\n",
            "Time : 20::59::59\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MDDAXWzLCsMu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2ab7ce45-2373-4b99-e98a-8115ea9a1912"
      },
      "source": [
        "#problem 7\n",
        "\n",
        "\n",
        "\n",
        "class Student:\n",
        "  def __init__(self, name, age, roll_no):\n",
        "    self.name = name\n",
        "    self.age = age\n",
        "    self.roll_no = roll_no\n",
        "\n",
        "  def Compare(std1, std2): \n",
        "     if (std1.age == std2.age):\n",
        "            print(\"Students are of equal age\")\n",
        "     else:\n",
        "            print(\"Students are not of equal age\")\n",
        "\n",
        "std1 = Student(\"Rahul\", 21, 33)\n",
        "std2 = Student(\"Rohit\", 22, 74)\n",
        "\n",
        "Student.Compare(std1, std2)\n",
        "    "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Students are not of equal age\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "00AQyB5bCuAF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ecb0253b-c27b-4d3c-d938-ed1c49edd6f1"
      },
      "source": [
        "#problem 8\n",
        "\n",
        "class Student:\n",
        "    sem = 3\n",
        "    institute = \"IIIT Dharwad\"\n",
        "    \n",
        "    def setData(self):\n",
        "        self.name = input(\"Enter the name of the student : \")\n",
        "        self.id = int(input(\"Enter the USN of student : \"))\n",
        "\n",
        "    def getInstanceData(self):\n",
        "        print(f\"Name : {self.name} \\nUSN = {self.id}\")\n",
        "\n",
        "    @classmethod\n",
        "    def getClassData(cls):\n",
        "        print(f\"Semester : {cls.sem} \\nInstitute : {cls.institute} \\n\")\n",
        "\n",
        "    @staticmethod\n",
        "    def getExplanation():\n",
        "        print(\"Class variables namely sem and institute are printed using ClassMethod and Instance variables namely name and id are printed using Instance Method\")\n",
        "\n",
        "\n",
        "s1 = Student()\n",
        "s1.setData()\n",
        "s1.getInstanceData()\n",
        "Student.getClassData()\n",
        "Student.getExplanation()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the name of the student : Prashant\n",
            "Enter the USN of student : 468\n",
            "Name : Prashant \n",
            "USN = 468\n",
            "Semester : 3 \n",
            "Institute : IIIT Dharwad \n",
            "\n",
            "Class variables namely sem and institute are printed using ClassMethod and Instance variables namely name and id are printed using Instance Method\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sat5nnGlCvBF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7a831835-556a-4fe6-cda4-f84b4046c08b"
      },
      "source": [
        "#problem 9\n",
        "\n",
        "class student:\n",
        "  def data(self):\n",
        "    self.Name = input(\"Enter the name of the student: \")\n",
        "    self.Roll_no = int(input(\"Enter the roll no of the student: \"))\n",
        "    self.Sem = int(input(\"Enter the semester of the student: \"))\n",
        "    self.nLaptop = 1\n",
        "    self.listLaptop = []\n",
        "    for i in range (0, self.nLaptop):\n",
        "          tempObj = self.Laptop()\n",
        "          self.listLaptop.append(tempObj)\n",
        "\n",
        "\n",
        "  class Laptop:\n",
        "      def __init__(self):\n",
        "            self.cpu = input(\"Enter the name of the CPU : \")\n",
        "            self.ram = input(\"Enter the RAM of the Laptop : \")\n",
        "            self.hardDisk = input(\"Enter the storage capacity of hard disk : \")\n",
        "            self.display = input(\"Enter the display resolution of the screen : \")\n",
        "        \n",
        "      def Show(self):\n",
        "            print(f\"\\nCPU : {self.cpu} \\nRAM : {self.ram} \\nHard Disk : {self.hardDisk} \\nDisplay Resolution : {self.display} \\n\")\n",
        "\n",
        "  def Show(self):\n",
        "        print(f\"\\nName : {self.Name} \\nUSN : {self.Roll_no} \\nSemester : {self.Sem} \\nNumber of Laptops : {self.nLaptop} \")\n",
        "        for i in range(0, self.nLaptop):\n",
        "            print(f\"Details of {i+1}th laptop : \")\n",
        "            self.listLaptop[i].Show()\n",
        "S1 = student()\n",
        "S1.data()\n",
        "S1.Show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the name of the student: Amaan\n",
            "Enter the roll no of the student: 864\n",
            "Enter the semester of the student: 4\n",
            "Enter the name of the CPU : Ryzen 5\n",
            "Enter the RAM of the Laptop : 8 GB\n",
            "Enter the storage capacity of hard disk : 1 TB\n",
            "Enter the display resolution of the screen : 1080p60\n",
            "\n",
            "Name : Amaan \n",
            "USN : 864 \n",
            "Semester : 4 \n",
            "Number of Laptops : 1 \n",
            "Details of 1th laptop : \n",
            "\n",
            "CPU : Ryzen 5 \n",
            "RAM : 8 GB \n",
            "Hard Disk : 1 TB \n",
            "Display Resolution : 1080p60 \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pu40xo8ojkDz"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
